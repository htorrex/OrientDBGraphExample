{"name":"Orientdbgraphexample","tagline":"Ejemplo OrientDB Graph","body":"### Example to OrientDB\r\n\r\n====================\r\n\r\nVery basic OrientDB Graph Example\r\nCreate an empty maven application project and add following lines to pom.xml:\r\n\r\n```\r\n<repositories>\r\n  <repository>\r\n    <id>Sonatype Releases</id>\r\n    <url>https://oss.sonatype.org/content/repositories/releases/</url>\r\n  </repository>\r\n  <repository>\r\n    <id>Sonatype Snapshots</id>\r\n    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\r\n  </repository>\r\n</repositories>\r\n```\r\nWe will be using snapshot version of OrientDB Graph Edition as it seems it is the only way to get it via maven.\r\n\r\nAnd add this to dependencies:\r\n```\r\n<dependency>\r\n  <groupId>com.orientechnologies</groupId>\r\n  <artifactId>orientdb-graphdb</artifactId>\r\n  <version>1.4.2-SNAPSHOT</version>\r\n</dependency>\r\n```\r\nTry to build the project and make sure that all dependencies are downloaded. And then we can start with the actual code.\r\n\r\nFirst lets initialize the database object:\r\n```\r\nOGraphDatabase db = new OGraphDatabase(PATH);\r\n```\r\nThe PATH is a path to where the database is located. For the sake of this example I will be using an in-memory database, so my path is \"memory:db\".\r\n\r\nWe need to create a database:\r\n```\r\ndb.create();\r\n```\r\nIf you're using an in-file database, you would do this as: C:\\\\database\r\n```\r\nif (!db.exists()) {\r\n  db.create();\r\n} else {\r\n  db.open(\"admin\", \"admin\");\r\n}\r\n```\r\nThe default username/password is always admin/admin.\r\n\r\nIn the Graph Edition of the OrientDB we have a (vertex, edge) structure, where each  vertex and edge is a document. We can create custom classes for vertices and edges.\r\n```\r\ndb.createVertexType(\"Student\");\r\ndb.createVertexType(\"Course\");\r\ndb.createEdgeType(\"Attends\");\r\n```\r\nSo here we create Student, Course and Attends classes. Now lets populate some data into the graph:\r\n```\r\nODocument student1 = db.createVertex(\"Student\");\r\nstudent1.field(\"name\", \"John\");\r\nstudent1.save();\r\n \r\nODocument course1 = db.createVertex(\"Course\");\r\ncourse1.field(\"title\", \"Algebra\");\r\ncourse1.save();\r\n \r\nODocument attends = db.createEdge (student1, course1, \"Attends\");\r\nattends.save();\r\n```\r\nTo get the data from OrientDB we can use SQL language like this:\r\n```\r\nList<ODocument> results = db.query(new OSQLSynchQuery(\"select from Student\"));\r\nfor (ODocument result: results) {\r\n      //log.info(\"result.json(): \"+result.toJSON());\r\n    \tlog.info(\"result.field: \"+result.field(\"name\"));\r\n}\r\n```\r\n\r\nAfter that you can play with this example and improve your implementation.\r\n\r\n\r\n\r\n\r\n\r\n","google":"orientdb example","note":"Don't delete this file! It's used internally to help with page regeneration."}